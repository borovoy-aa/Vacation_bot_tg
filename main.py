import logging
import os
from telegram import BotCommand, Update
from telegram.ext import Application, ContextTypes
from dotenv import load_dotenv
from handlers.employee_handler import (
    registration_handler, add_vacation_handler, edit_vacation_handler, delete_vacation_handler,
    delete_employee_handler, clear_all_employees_handler, notify_handler, list_employees_handler,
    stats_handler, export_vacations_handler, export_employees_handler, my_vacations_handler,
    invalid_command_handler, random_text_handler, error_handler
)
from handlers.notification_handler import setup_notifications, test_notifications_handler
from database.db_operations import create_tables

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}"
    logger.error(error_msg, exc_info=True)
    admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]
    for admin_id in admin_ids:
        try:
            await context.bot.send_message(chat_id=admin_id, text=error_msg[:4000])
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}", exc_info=True)
    if update and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Admin.")

async def set_initial_commands(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    try:
        initial_commands = [
            BotCommand("start", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        ]
        await context.bot.set_my_commands(initial_commands, scope={"type": "all_private_chats"})
        logger.info("–ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {str(e)}", exc_info=True)

async def set_full_commands(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    try:
        public_commands = [
            BotCommand("add_vacation", "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–ø—É—Å–∫"),
            BotCommand("edit_vacation", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—É—Å–∫"),
            BotCommand("delete_vacation", "–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –æ—Ç–ø—É—Å–∫"),
            BotCommand("notify", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
            BotCommand("my_vacations", "–ú–æ–∏ –æ—Ç–ø—É—Å–∫–∞"),
        ]
        admin_commands = [
            BotCommand("list_employees", "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"),
            BotCommand("delete_employee", "–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("export_vacations", "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–ø—É—Å–∫–æ–≤"),
            BotCommand("export_employees", "–≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"),
            BotCommand("clear_all_employees", "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"),
        ]
        await context.bot.set_my_commands(public_commands, scope={"type": "all_private_chats"})
        for admin_id in admin_ids:
            await context.bot.set_my_commands(public_commands + admin_commands, scope={"type": "chat", "chat_id": admin_id})
        logger.info("–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}", exc_info=True)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    load_dotenv()
    token = os.getenv('TELEGRAM_TOKEN')
    group_chat_id = os.getenv('GROUP_CHAT_ID')
    admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

    if not all([token, group_chat_id, admin_ids]):
        missing = [var for var, val in {
            'TELEGRAM_TOKEN': token, 'GROUP_CHAT_ID': group_chat_id, 'ADMIN_IDS': admin_ids and ','.join(map(str, admin_ids))
        }.items() if not val]
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        return

    try:
        create_tables()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        return

    try:
        application = Application.builder().token(token).build()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram: {e}", exc_info=True)
        return

    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    application.add_handler(registration_handler)
    application.add_handler(add_vacation_handler)
    application.add_handler(edit_vacation_handler)
    application.add_handler(delete_vacation_handler)
    application.add_handler(delete_employee_handler)
    application.add_handler(clear_all_employees_handler)
    application.add_handler(notify_handler)
    application.add_handler(test_notifications_handler)
    application.add_handler(list_employees_handler)
    application.add_handler(stats_handler)
    application.add_handler(export_vacations_handler)
    application.add_handler(export_employees_handler)
    application.add_handler(my_vacations_handler)
    application.add_handler(invalid_command_handler)
    application.add_handler(random_text_handler)
    application.add_error_handler(error_handler)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    try:
        setup_notifications(application, int(group_chat_id), admin_ids)
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)

    async def send_welcome(context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
        message = "üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\n–Ø –≥–æ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥."
        for admin_id in admin_ids:
            try:
                await context.bot.send_message(chat_id=admin_id, text=message)
                logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}", exc_info=True)

    application.job_queue.run_once(send_welcome, when=1)
    application.job_queue.run_once(set_initial_commands, when=0)

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}", exc_info=True)
        raise

if __name__ == '__main__':
    main()