import logging
import os
from telegram import Update
from telegram.ext import Application, ContextTypes
from dotenv import load_dotenv
from handlers.employee_handler import (
    add_vacation_handler, edit_vacation_handler, delete_employee_handler, list_employees_handler,
    stats_handler, export_employees_handler, notify_handler, invalid_command_handler,
    set_bot_commands, delete_vacation_handler, random_text_handler, clear_all_employees_handler,
    start_handler
)
from handlers.notification_handler import setup_notifications
from database.db_operations import create_tables

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞."""
    error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}"
    logger.error(error_msg, exc_info=True)
    admin_id = os.getenv('ADMIN_ID')
    if admin_id:
        try:
            await context.bot.send_message(chat_id=int(admin_id), text=error_msg[:4000])
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}", exc_info=True)
    if update and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Admin.")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    load_dotenv()
    token = os.getenv('TELEGRAM_TOKEN')
    group_chat_id = os.getenv('GROUP_CHAT_ID')
    admin_id = os.getenv('ADMIN_ID')

    if not all([token, group_chat_id, admin_id]):
        missing = [var for var, val in {'TELEGRAM_TOKEN': token, 'GROUP_CHAT_ID': group_chat_id, 'ADMIN_ID': admin_id}.items() if not val]
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        return

    try:
        create_tables()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        return

    try:
        application = Application.builder().token(token).build()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)
        return

    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    application.add_handler(start_handler)
    application.add_handler(clear_all_employees_handler)
    application.add_handler(add_vacation_handler)
    application.add_handler(edit_vacation_handler)
    application.add_handler(delete_vacation_handler)
    application.add_handler(delete_employee_handler)
    application.add_handler(list_employees_handler)
    application.add_handler(stats_handler)
    application.add_handler(export_employees_handler)
    application.add_handler(notify_handler)
    application.add_handler(invalid_command_handler)
    application.add_handler(random_text_handler)
    logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    application.add_error_handler(error_handler)

    try:
        setup_notifications(application, group_chat_id, int(admin_id))
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–±–µ–∑ Markdown)
    async def send_welcome(context: ContextTypes.DEFAULT_TYPE):
        admin_id = int(os.getenv('ADMIN_ID'))
        message = (
            "üëã –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
            "üìÖ /add_vacation ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–ø—É—Å–∫\n"
            "‚úèÔ∏è /edit_vacation ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–ø—É—Å–∫\n"
            "üóëÔ∏è /delete_vacation ‚Äî –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –æ—Ç–ø—É—Å–∫\n"
            "üîî /notify ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ—Ç–ø—É—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π\n"
            "üö´ /cancel ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
            "–ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞:\n"
            "üë• /list_employees ‚Äî –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
            "üóëÔ∏è /delete_employee <ID> ‚Äî –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
            "üìä /stats ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—É—Å–∫–æ–≤\n"
            "üì§ /export_employees ‚Äî –í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel\n"
            "‚ö†Ô∏è /clear_all_employees ‚Äî –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n"
            "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –í–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ @Admin."
        )
        try:
            await context.bot.send_message(chat_id=admin_id, text=message)
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}", exc_info=True)

    application.job_queue.run_once(send_welcome, when=1)
    application.job_queue.run_once(set_bot_commands, when=0)

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        raise

if __name__ == '__main__':
    main()